<dec f='codebrowser/src/mpack/mpack-node.h' l='1224' type='size_t mpack_node_enum_optional(mpack_node_t node, const char ** strings, size_t count)'/>
<def f='codebrowser/src/mpack/mpack-node.c' l='1901' ll='1925' type='size_t mpack_node_enum_optional(mpack_node_t node, const char ** strings, size_t count)'/>
<use f='codebrowser/src/mpack/mpack-node.c' l='1928' u='c' c='mpack_node_enum'/>
<doc f='codebrowser/src/mpack/mpack-node.h' l='1197'>/**
 * Searches the given string array for a string matching the given node,
 * returning its index or @a count if no strings match.
 *
 * If the value is not a string, or it does not match any of the
 * given strings, @a count is returned and no error is flagged.
 *
 * If any error occurs or if the tree is in an error state, @a count
 * is returned.
 *
 * This can be used to quickly parse a string into an enum when the
 * enum values range from 0 to @a count-1. If the last value in the
 * enum is a special &quot;count&quot; value, it can be passed as the count,
 * and the return value can be cast directly to the enum type.
 *
 * @code{.c}
 * typedef enum           { APPLE ,  BANANA ,  ORANGE , COUNT} fruit_t;
 * const char* fruits[] = {&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;};
 *
 * fruit_t fruit = (fruit_t)mpack_node_enum_optional(node, fruits, COUNT);
 * @endcode
 *
 * @param node The node
 * @param strings An array of expected strings of length count
 * @param count The number of strings
 * @return The index of the matched string, or @a count in case of error
 */</doc>
