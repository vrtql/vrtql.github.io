<dec f='codebrowser/src/mpack/mpack-node.h' l='356' type='void mpack_tree_init_stream(mpack_tree_t * tree, mpack_tree_read_t read_fn, void * context, size_t max_message_size, size_t max_message_nodes)'/>
<def f='codebrowser/src/mpack/mpack-node.c' l='1072' ll='1086' type='void mpack_tree_init_stream(mpack_tree_t * tree, mpack_tree_read_t read_fn, void * context, size_t max_message_size, size_t max_message_nodes)'/>
<doc f='codebrowser/src/mpack/mpack-node.h' l='329'>/**
 * Initializes a tree parser from an unbounded stream, or a stream of
 * unknown length.
 *
 * The parser can be used to read a single message from a stream of unknown
 * length, or multiple messages from an unbounded stream, allowing it to
 * be used for RPC communication. Call @ref mpack_tree_parse() to parse
 * a message from a blocking stream, or @ref mpack_tree_try_parse() for a
 * non-blocking stream.
 *
 * The stream will use a growable internal buffer to store the most recent
 * message, as well as allocated pages of nodes for the parse tree.
 *
 * Maximum allowances for message size and node count must be specified in this
 * function (since the stream is unbounded.) They can be changed later with
 * @ref mpack_tree_set_limits().
 *
 * @param tree The tree parser
 * @param read_fn The read function
 * @param context The context for the read function
 * @param max_message_size The maximum size of a message in bytes
 * @param max_message_nodes The maximum number of nodes per message. See
 *        @ref mpack_node_data_t for the size of nodes.
 *
 * @see mpack_tree_read_t
 * @see mpack_reader_context()
 */</doc>
