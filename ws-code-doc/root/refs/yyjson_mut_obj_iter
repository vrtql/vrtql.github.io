<def f='codebrowser/src/util/yyjson.h' l='3213' ll='3219'/>
<use f='codebrowser/src/util/yyjson.h' l='3213'/>
<size>40</size>
<doc f='codebrowser/src/util/yyjson.h' l='3183'>/**
 A mutable JSON object iterator.
 
 @warning You should not modify the object while iterating over it, but you can
    use `yyjson_mut_obj_iter_remove()` to remove current value.
 
 @par Example
 @code
    yyjson_mut_val *key, *val;
    yyjson_mut_obj_iter iter = yyjson_mut_obj_iter_with(obj);
    while ((key = yyjson_mut_obj_iter_next(&amp;iter))) {
        val = yyjson_mut_obj_iter_get_val(key);
        your_func(key, val);
        if (your_val_is_unused(key, val)) {
            yyjson_mut_obj_iter_remove(&amp;iter);
        }
    }
 @endcode
 
 If the ordering of the keys is known at compile-time, you can use this method
 to speed up value lookups:
 @code
    // {&quot;k1&quot;:1, &quot;k2&quot;: 3, &quot;k3&quot;: 3}
    yyjson_mut_val *key, *val;
    yyjson_mut_obj_iter iter = yyjson_mut_obj_iter_with(obj);
    yyjson_mut_val *v1 = yyjson_mut_obj_iter_get(&amp;iter, &quot;k1&quot;);
    yyjson_mut_val *v3 = yyjson_mut_obj_iter_get(&amp;iter, &quot;k3&quot;);
 @endcode
 @see `yyjson_mut_obj_iter_get()` and `yyjson_mut_obj_iter_getn()`
 */</doc>
<mbr r='yyjson_mut_obj_iter::idx' o='0' t='size_t'/>
<mbr r='yyjson_mut_obj_iter::max' o='64' t='size_t'/>
<mbr r='yyjson_mut_obj_iter::cur' o='128' t='yyjson_mut_val *'/>
<mbr r='yyjson_mut_obj_iter::pre' o='192' t='yyjson_mut_val *'/>
<mbr r='yyjson_mut_obj_iter::obj' o='256' t='yyjson_mut_val *'/>
