<dec f='include/openssl/bn.h' l='172'/>
<doc f='include/openssl/bn.h' l='109'>/*
 * BN_prime_checks_for_size() returns the number of Miller-Rabin iterations
 * that will be done for checking that a random number is probably prime. The
 * error rate for accepting a composite number as prime depends on the size of
 * the prime |b|. The error rates used are for calculating an RSA key with 2 primes,
 * and so the level is what you would expect for a key of double the size of the
 * prime.
 *
 * This table is generated using the algorithm of FIPS PUB 186-4
 * Digital Signature Standard (DSS), section F.1, page 117.
 * (https://dx.doi.org/10.6028/NIST.FIPS.186-4)
 *
 * The following magma script was used to generate the output:
 * securitybits:=125;
 * k:=1024;
 * for t:=1 to 65 do
 *   for M:=3 to Floor(2*Sqrt(k-1)-1) do
 *     S:=0;
 *     // Sum over m
 *     for m:=3 to M do
 *       s:=0;
 *       // Sum over j
 *       for j:=2 to m do
 *         s+:=(RealField(32)!2)^-(j+(k-1)/j);
 *       end for;
 *       S+:=2^(m-(m-1)*t)*s;
 *     end for;
 *     A:=2^(k-2-M*t);
 *     B:=8*(Pi(RealField(32))^2-6)/3*2^(k-2)*S;
 *     pkt:=2.00743*Log(2)*k*2^-k*(A+B);
 *     seclevel:=Floor(-Log(2,pkt));
 *     if seclevel ge securitybits then
 *       printf &quot;k: %5o, security: %o bits  (t: %o, M: %o)\n&quot;,k,seclevel,t,M;
 *       break;
 *     end if;
 *   end for;
 *   if seclevel ge securitybits then break; end if;
 * end for;
 *
 * It can be run online at:
 * http://magma.maths.usyd.edu.au/calc
 *
 * And will output:
 * k:  1024, security: 129 bits  (t: 6, M: 23)
 *
 * k is the number of bits of the prime, securitybits is the level we want to
 * reach.
 *
 * prime length | RSA key size | # MR tests | security level
 * -------------+--------------|------------+---------------
 *  (b) &gt;= 6394 |     &gt;= 12788 |          3 |        256 bit
 *  (b) &gt;= 3747 |     &gt;=  7494 |          3 |        192 bit
 *  (b) &gt;= 1345 |     &gt;=  2690 |          4 |        128 bit
 *  (b) &gt;= 1080 |     &gt;=  2160 |          5 |        128 bit
 *  (b) &gt;=  852 |     &gt;=  1704 |          5 |        112 bit
 *  (b) &gt;=  476 |     &gt;=   952 |          5 |         80 bit
 *  (b) &gt;=  400 |     &gt;=   800 |          6 |         80 bit
 *  (b) &gt;=  347 |     &gt;=   694 |          7 |         80 bit
 *  (b) &gt;=  308 |     &gt;=   616 |          8 |         80 bit
 *  (b) &gt;=   55 |     &gt;=   110 |         27 |         64 bit
 *  (b) &gt;=    6 |     &gt;=    12 |         34 |         64 bit
 */</doc>
